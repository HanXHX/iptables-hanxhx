#!/bin/bash

### BEGIN INIT INFO
# Provides:          firewall
# Required-Start:    $local_fs $remote_fs $network $named
# Required-Stop:     $local_fs $remote_fs $network $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: start/stop iptables-firewall
### END INIT INFO

# Author: Emilien Mantel <emilien.mantel@debianiste.org>
#################################################################

PATH=/sbin:/bin:/usr/sbin:/usr/bin

FIREWALL_DIR=/etc/firewall
DATA_DIR=/var/local/firewall
IPTABLES=/sbin/iptables
IP6TABLES=/sbin/ip6tables
SYSCTL=/sbin/sysctl
VERSION='1.0-dev'
FIREWALL_CONF=$FIREWALL_DIR/firewall.conf
KERNEL_OPTION=$DATA_DIR/last_kernel_option
[ $UID -ne 0 ] && echo "You must be root!" && exit 1

#################################################################
# Configuration
#################################################################
if [ -f $FIREWALL_CONF ]
then
	source $FIREWALL_CONF

	# force $ipv6_disabled if allready disabled
	grep -q 1 /proc/sys/net/ipv6/conf/*/disable_ipv6 && ipv6_disabled=true
else 
	echo "No configuration-file found ($FIREWALL_CONF)"
	exit 1
fi

#################################################################
# Functions
#################################################################
function parse_ip_conf
{
	# $1 = config file
	[[ $1 =~ whitelist ]] && state=ACCEPT || state=DROP
	[[ $1 =~ ipv6 ]] && ipt=$IP6TABLES || ipt=$IPTABLES
	echo "PARSING $1"

	[[ $ipv6_disabled ]] && [[ $ipt = $IP6TABLES ]] && return

	for IP in `sed 's/\s/_/g' $1 | grep -v "^#"`
	do
		$ipt -A INPUT -s $IP -m state --state NEW -j $state
	done
}

function ip46tables
{
	$IPTABLES $*
	! $ipv6_disabled && $IP6TABLES $*
}

function set_kernel_option
{
	## $1 = value | $2 = key
	# We save last config
	echo "$2=$($SYSCTL -n $2)" >> $KERNEL_OPTION 
	# Apply new config
	$SYSCTL -w "$2=$1"
}

#################################################################
# Dispatch 
#################################################################

case "$1" in
	start)

		if  ! $firewall_enable
		then
			echo "Firewall is not enabled. Please check \$firewall_enable in $FIREWALL_CONF"
			exit 1
		fi

		echo "Starting firewall..."

		#################################################################
		## DELETE OLD RULES
		#################################################################

		ip46tables -F
		ip46tables -X

		#################################################################
		# DEFAULT POLICIES
		#################################################################

		ip46tables -P INPUT DROP
		ip46tables -P OUTPUT ACCEPT

		#################################################################
		# IPv4 FORWARDING 
		#################################################################

		if $ipv4_forwarding 
		then
			$IPTABLES -P FORWARD ACCEPT
			## enable IPv4 forwarding ( ! overwrites sysctl settings ! )
			set_kernel_option 1 'net.ipv4.ip_forward'
		else
			## drop IPv4 forwarding
			$IPTABLES -P FORWARD DROP
			## disable IPv4 forwarding ( ! overwrites sysctl settings ! )
			set_kernel_option 0 'net.ipv4.ip_forward'
			set_kernel_option 0 'net.ipv4.conf.all.forwarding'
			set_kernel_option 0 'net.ipv4.conf.default.forwarding'
		fi

		#################################################################
		# ALLOW DEFAULTS
		#################################################################

		## allow anything on loopback
		ip46tables -A INPUT -i lo -j ACCEPT
		ip46tables -A OUTPUT -o lo -j ACCEPT

		## allow ICMP
		$IPTABLES -A INPUT -p icmp -j ACCEPT
		[ ! $ipv6_disabled ] && $IP6TABLES -A INPUT -p icmpv6 -j ACCEPT

		## allow all packets that already have a connection
		ip46tables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
		ip46tables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT

		##################################################################
		# EXTERNAL CONFIGS
		##################################################################

		## ACCEPT ALL CONNECTIONS FROM WHITELIST FILE
		parse_ip_conf "$FIREWALL_DIR/ip-whitelist.conf"
		parse_ip_conf "$FIREWALL_DIR/ipv6-whitelist.conf"

		## DROP ALL CONNECTIONS FROM BLACKLIST FILES 
		parse_ip_conf "$FIREWALL_DIR/ip-blacklist.conf"
		parse_ip_conf "$FIREWALL_DIR/ipv6-blacklist.conf"

		# EXECUTE ALL CUSTOM SCRIPTS IN $FIREWALL_DIR/custom
		if [ "$(ls -A $FIREWALL_DIR/custom)" ]; then
			for F in $FIREWALL_DIR/custom/*; do
				. $F
			done;
		fi

		# ALLOWED PORTS/PROTOCOLS FROM $FIREWALL_DIR/services.conf
		cat $FIREWALL_DIR/services.conf | grep -v "^#" $FIREWALL_DIR/services.conf | while read line; do
			[ -z "$line" ] && continue
	
			# INITIALIZE
			PORT=""
			PROTO=""
			IP="0.0.0.0/0"
			while IFS=' ' read -ra SERVICES; do
				PORT=`echo ${SERVICES[0]} | cut -d"/" -f1`
				PROTO=`echo ${SERVICES[0]} | cut -d"/" -f2`
				if [ ${#SERVICES[@]} == 2 ]; then
					IP=${SERVICES[1]}
				fi;
				ip46tables -A INPUT -p $PROTO -s $IP --dport $PORT -m state --state NEW -j ACCEPT
				done <<< "$line"
		done;

		#################################################################
		# Drop and log invalid packages
		#################################################################

		if $drop_invalid ; then
			ip46tables -N invalid_drop
			ip46tables -A invalid_drop -m state --state INVALID -m limit --limit 60/m -j LOG --log-prefix "INVALID_PACKAGE"
			ip46tables -A invalid_drop -m state --state INVALID -j DROP

			ip46tables -A INPUT -m state --state INVALID -j invalid_drop
			ip46tables -A OUTPUT -m state --state INVALID -j invalid_drop
		fi

		##################################################################
		# BROADCAST AND MULTICAST
		##################################################################

		if $drop_broadcast ; then
			ip46tables -A INPUT -m pkttype --pkt-type broadcast -j DROP
			ip46tables -A INPUT -m pkttype --pkt-type multicast -j DROP
		fi

		##################################################################
		# PORTSCAN DETECTION
		##################################################################

		if $drop_portscan ; then

			ip46tables -N portscan_drop
			ip46tables -A portscan_drop -m limit --limit 60/m -j LOG --log-prefix "PORTSCAN_DETECTED"
			ip46tables -A portscan_drop -j DROP

			## nmap Null scans / no flags
			ip46tables -A INPUT -p tcp --tcp-flags ALL NONE -j portscan_drop
			## nmap FIN stealth scan
			ip46tables -A INPUT -p tcp --tcp-flags ALL FIN -j portscan_drop
			## SYN + FIN
			ip46tables -A INPUT -p tcp --tcp-flags SYN,FIN SYN,FIN -j portscan_drop
			## SYN + RST
			ip46tables -A INPUT -p tcp --tcp-flags SYN,RST SYN,RST -j portscan_drop
			## FIN + RST
			ip46tables -A INPUT -p tcp --tcp-flags FIN,RST FIN,RST -j portscan_drop
			## FIN + URG + PSH
			ip46tables -A INPUT -p tcp --tcp-flags ALL FIN,URG,PSH -j portscan_drop
			## XMAS
			ip46tables -A INPUT -p tcp --tcp-flags ALL URG,ACK,PSH,RST,SYN,FIN -j portscan_drop
			## ALL
			ip46tables -A INPUT -p tcp --tcp-flags ALL ALL -j portscan_drop
			## FIN/PSH/URG without ACK
			ip46tables -A INPUT -p tcp --tcp-flags ACK,FIN FIN -j portscan_drop
			ip46tables -A INPUT -p tcp --tcp-flags ACK,PSH PSH -j portscan_drop
			ip46tables -A INPUT -p tcp --tcp-flags ACK,URG URG -j portscan_drop
		fi

		##################################################################
		# USEFULL OPTIONS ( ! overwrites sysctl settings ! )
		##################################################################

		if $secure_redirects ; then
			## allow only ICMP redirects from our own gateway
			set_kernel_option 1 'net.ipv4.conf.all.secure_redirects'
			set_kernel_option 1 'net.ipv4.conf.default.secure_redirects'
		fi

		if $block_redirects ; then
			## dont accept ICMP redirects
			set_kernel_option 0 'net.ipv4.conf.all.accept_redirects'
			set_kernel_option 0 'net.ipv4.conf.default.accept_redirects'
			## dont sent ICMP redirects
			set_kernel_option 0 'net.ipv4.conf.all.send_redirects'
			set_kernel_option 0 'net.ipv4.conf.default.send_redirects'
		fi

		if $ignore_broadcast_icmp ; then
			## ignore broadcast/multicast ICMP // smurf-attack prevention
			set_kernel_option 1 'net.ipv4.icmp_echo_ignore_broadcasts'
		fi

		if $ignore_bogus_errors ; then
			## ignore bogus error responses
			set_kernel_option 1 'net.ipv4.icmp_ignore_bogus_error_responses'
		fi

		## dont ignore pings
		set_kernel_option 0 'net.ipv4.icmp_echo_ignore_all'

		if $block_source_route_packages ; then
			## allow no source route packages
			set_kernel_option 0 'net.ipv4.conf.all.accept_source_route'
			set_kernel_option 0 'net.ipv4.conf.default.accept_source_route'
		fi

		if $block_proxy_arp ; then
			## we dont want to proxy arp
			set_kernel_option 0 'net.ipv4.conf.all.proxy_arp'
			set_kernel_option 0 'net.ipv4.conf.default.proxy_arp'
		fi

		if $enable_syn_cookies ; then
			## enable syn-cookies // syn-flood prevention
			set_kernel_option 1 'net.ipv4.tcp_syncookies'
			set_kernel_option 2048 'net.ipv4.tcp_max_syn_backlog'
			set_kernel_option 5 'net.ipv4.tcp_syn_retries'
			set_kernel_option 5 'net.ipv4.tcp_synack_retries'
		fi

		if $enable_reverse_path ; then
			## enable reverse path filter // RFC1812 // spoofing attack prevention
			set_kernel_option 1 'net.ipv4.conf.all.rp_filter'
			set_kernel_option 1 'net.ipv4.conf.default.rp_filter'
		fi

		if $disable_bootp_relay ; then
			## no relaying of bootp
			set_kernel_option 0 'net.ipv4.conf.all.bootp_relay'
			set_kernel_option 0 'net.ipv4.conf.default.bootp_relay'
		fi

		if $disable_martian_loging ; then
			## do not log martian packets
			set_kernel_option 0 'net.ipv4.conf.all.log_martians'
			set_kernel_option 0 'net.ipv4.conf.default.log_martians'
		fi

		if $disable_srr ; then
			## dont allow SRR
			set_kernel_option 0 'net.ipv4.conf.all.accept_source_route'
			set_kernel_option 0 'net.ipv4.conf.default.accept_source_route'
		fi

		if $enable_sack ; then
			## enable enable_sack
			set_kernel_option 1 'net.ipv4.tcp_sack'
			set_kernel_option 1 'net.ipv4.tcp_dsack'
			set_kernel_option 1 'net.ipv4.tcp_fack'
		fi

		#################################################################
		# IPv6 
		#################################################################

		if $ipv6_disabled
		then
			## disable IPv6 ( ! overwrites sysctl settings ! )
			echo "I disable IPv6" 
			set_kernel_option 1 'net.ipv6.conf.all.disable_ipv6'
			set_kernel_option 1 'net.ipv6.conf.default.disable_ipv6'
		else
			# ---- All IPv6 config must be in this block ----
			if $ipv6_forwarding
			then
				$IP6TABLES -P FORWARD ACCEPT
				set_kernel_option 1 'net.ipv6.conf.all.forwarding'
				set_kernel_option 1 'net.ipv6.conf.default.forwarding'
			else
				## drop IPv6 forwarding
				$IP6TABLES -P FORWARD DROP
				## disable IPv6 forwarding ( ! overwrites sysctl settings ! )
				set_kernel_option 0 'net.ipv6.conf.all.forwarding'
				set_kernel_option 0 'net.ipv6.conf.default.forwarding'
			fi
		fi

		echo "Firewall started"
		;;

	stop)
		echo "Stopping firewall..."
		
		## delete old rules
		$IPTABLES -F
		$IPTABLES -X
		
		## allow anything
		$IPTABLES -P INPUT ACCEPT
		$IPTABLES -P OUTPUT ACCEPT
		$IPTABLES -P FORWARD ACCEPT

		## allow all ip IPv6 traffic
		$IP6TABLES -P INPUT ACCEPT
		$IP6TABLES -P OUTPUT ACCEPT
		$IP6TABLES -P FORWARD ACCEPT
		
		## Clean kernel parameters
		$SYSCTL -p $KERNEL_OPTION
		rm $KERNEL_OPTION

		echo "Firewall stopped"
		;;

	status)
		echo "##################################################################"
		echo "## FILTER"
		echo "##################################################################"
		$IPTABLES -L -vn
		echo "##################################################################"
		echo "## NAT"
		echo "##################################################################"
		$IPTABLES -t nat -L -vn
		echo "##################################################################"
		echo "## MANGLE"
		echo "##################################################################"
		$IPTABLES -t mangle -L -vn
		;;

	restart|reload|force-reload)
		$0 stop
		sleep 1
		$0 start
		;;

	*)
		echo "Syntax: $0 {start|stop|restart|reload|force-reload|status}"
		exit 1
		;;

esac




